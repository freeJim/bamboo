#!/usr/bin/env luajit

require 'posix'
require 'signal'
require 'bamboo'
require 'redis'

local util = require 'bamboo.util'
local readSettings = util.readSettings
local env = {}
BAMBOO_DB = nil
SCRIPT_PIDS = {}


signal.signal("SIGINT", function (...)
    for script, pid in pairs(SCRIPT_PIDS) do
        posix.kill(pid)
    end
end)

signal.signal("SIGCLD", 'ignore')

------------------------------------------------------------------------------
-- load configuration
local config = {}

------------------------------------------------------------------------------
--
function parse_args(arg)
    if #arg == 0 then return nil end

	-- if has only command
	if #arg == 1 then return arg[1], {} end
	-- arg[1] is the command name
    local cmd = table.remove(arg, 1)
    local settings = {}
    local last_opt = nil

	-- make the liner command line args become key value pairs
	local function beatArgs(arg)
		for i, opt in ipairs(arg) do
		    local token = opt:match("%-+([a-z%-_]+)")

		    if token then
		        last_opt = token
		    else
		        settings[last_opt] = opt
		    end
		end
	end

	local kv_start = -1
    -- all command options are allowed in two style: -xx yy -foo bar or xx yy zz
	-- now, arg[1] is the options
	if arg[1]:sub(1, 1) == '-' then 
		beatArgs(arg)
	else
		-- if arg[1] doesn't start with -, 
		-- if the lenght of arg is larger than 2, check the following args
		for i = 1, #arg do
			if arg[i]:sub(1,1) == '-' then
				kv_start = i
				break
			end
		end 

		-- the linear part
		if kv_start < 0 then
			-- push all args into setting
			for i = 1, #arg do
				settings[#settings + 1] = arg[i]
			end
		else
			-- push the following args into settings linearly
			for i = 1, kv_start - 1 do
				settings[#settings + 1] = arg[i]
			end
		end

		if kv_start > 0 then
			-- the key value part
			local rest = {}
			for i = kv_start, #arg do
				rest[#rest + 1] = arg[i]
			end

			-- put the rest part to settings
			beatArgs(rest)		
		end
    end

    return cmd, settings
end


local function run_script(app_dir, script)
    local pid = posix.fork()

    if pid == 0 then
        -- script is the file name to execute
        posix.execp("bamboo_handler", app_dir, script)
    else
        print("Started " .. script .. " PID " .. pid)
        SCRIPT_PIDS[script] = pid
    end

    return pid
end


local function run_app(app_dir, targets)
    local pid
    local running = {}

    for script, pid in pairs(SCRIPT_PIDS) do
        running[script] = posix.kill(pid, 0) == 0
    end

    for _, script in ipairs(targets) do
        if not running[script] then
            run_script(app_dir, script)
        end
    end
end

local function run_tests(test_dir, full)
    print("\n---------------- TESTS -----------------")
    local tests = posix.glob(test_dir .. "/*_tests.lua")

    if tests then
        local cmd = "tsc -f "
        if full then cmd = cmd .. "-f " end

        os.execute(cmd .. table.concat(tests, ' '))
    else
        print("\n-------------- NO TESTS ----------------")
        print("  You must work at a startup.")
    end
end


function findDirs(dir_collection, cur_dir )
	local files = posix.dir(cur_dir)
	for i, f in ipairs(files) do
		local path = cur_dir..'/'..f
		local fobj = posix.stat(path)
		if fobj and fobj.type == 'directory' then
			if not f:startsWith('.') then
				table.insert(dir_collection, path)
				findDirs(dir_collection, path)
			end
		end
	end
end




local function wait_on_children(app_dir, targets)
    local dead_count = 0
    local child_count = 0
    local p, msg, ret

	if config.auto_reload_when_code_change and not config.PRODUCTION then
		-------------------------------------------------------
		local inotify = require 'inotify'
		local dirs = { '.' }
		local handle = inotify.init()
		-- watch all subdirs in current project directory
		findDirs(dirs, '.')
		for _, d in ipairs(dirs) do
			handle:addwatch(d, inotify.IN_CREATE, inotify.IN_MOVE, inotify.IN_MODIFY, inotify.IN_DELETE)
		end
		local starttime, laststoptime = 0, 0
		while true do
			starttime = os.time()
			-- block here
			local events = handle:read()
			
			-- ask time distance is larger than 2 seconds
			if starttime - laststoptime > 2 then
				-- kill processes
				for _, ev in ipairs(events) do
				if ev.name:endsWith('.lua') then
						print(ev.name .. ' was changed.')
						for script, pid in pairs(SCRIPT_PIDS) do
							local ret = posix.kill(pid)
							if ret == 0 then
								SCRIPT_PIDS[script] = nil
							end
						end
					end
				end
				
				laststoptime = os.time()
				
				-- start processes
				for _, script in ipairs(targets) do
					if not SCRIPT_PIDS[script] then
						run_script(app_dir, script)
					end
				end	
				-------------------------------------------------------
			end
		end
		handle:close()
	else
		-- for PRODUCTION mode and normal develope mode
		repeat
			p, msg, ret = posix.wait(-1)
		until p
		
		for script, pid in pairs(SCRIPT_PIDS) do
			if p == pid then
				print("CHILD DIED " .. script .. " PID " .. p ..":", msg)
				SCRIPT_PIDS[script] = nil
				return script, pid
			end
		end
	end
end



local function makemd5()
    require 'md5'

    math.randomseed(os.time())
    local num = math.random(1000000, 10000000)
    local md5_str = md5.sumhexa(num)
    local result = ('%s-%s-%s-%s-%s'):format(md5_str:sub(1, 8), md5_str:sub(9, 12), md5_str:sub(13, 16), md5_str:sub(17, 20), md5_str:sub(21, 32))
    -- print(result)
    return result
end

local killProcesses = function (settings)
	local fd = io.popen('ps eaux|grep lua|grep $(pwd)', 'r')
	local output = fd:read("*a")
	fd:close()
	-- print(output)

	local cmd_output = output:split('\n')
	local pattern0 = "(%d+).+lua /usr/local/bin/bamboo start"
	local pattern1 = "(%d+).+lua /usr/local/bin/bamboo_handler"
	local flag = true
	local findit = false
	local pid
	for _, part in ipairs(cmd_output) do
		pid = part:match(pattern0)
		print('===>>>>', pid)
		findit = true
		if pid then
			local ret = os.execute(('kill -9 %s'):format(pid))
			if ret ~= 0 and flag == true then 
				flag = false
			end
		end
	end
	
	for _, part in ipairs(cmd_output) do
		pid = part:match(pattern1)
		print('===>>>>', pid)
		findit = true
		if pid then
			local ret = os.execute(('kill -9 %s'):format(pid))
			if ret ~= 0 and flag == true then 
				flag = false
			end
		end
	end
	
	if findit then
		if flag then
			print("OK. I did it.")
		else
			print("[ERROR] Failed to stop the bamboo server for this application, you'd better use 'ps ex|grep lua' to check.")
		end
	else
		print('OK. No running bamboo processes for this application.')
	end

end

local startProcesses = function (settings)
	readSettings(config)
	local appname = config.project_name
	local monserver_dir = config.monserver_dir
   
	-- mount media directory
--		local fd = io.popen('mount', 'r')
--		local content = fd:read('*a')
--		fd:close()
--
--		local matched = content:match(("media on %ssites/%s type none"):format(monserver_dir, appname))
--		if not matched then
--			-- mount it
--			local cmdstr = ("mount -B media  %ssites/%s"):format(monserver_dir, appname)
--			print(cmdstr)
--			os.execute(cmdstr)
--		end

	--for i,v in pairs(settings) do print(i,v) end
	-- here, app is a directory pattern string, for glob
	local app_dir = settings.app or './'
	local app = ('%s%s'):format((settings.app or "./"), 'app/handler_*.lua')
	local script_times = {}

	-- while true do

	local function runit()
		local targets = assert(posix.glob(app))

		for _, script in ipairs(targets) do
			if not script_times[script] then
				script_times[script] = os.time() 
			end
		end

		run_app(app_dir, targets)
		local script, pid = wait_on_children(app_dir, targets)
		local tick = os.time()

		if tick - script_times[script] < 1 then
			print("SCRIPT " .. script .. " RESTARTING TOO FAST. Pausing while you fix stuff.")
			posix.sleep(10)
			tick = os.time()
		end

		script_times[script] = tick
	end
	
	if config.PRODUCTION then
		while true do runit() end
	else
		os.execute('')
		runit()
	end

end


COMMANDS = {
    help = function(settings)
        print("AVAILABLE COMMANDS:")
        for k,v in pairs(COMMANDS) do
            print(k)
        end
    end,

    test = function(settings)
        local target = settings.from or "tests"
		run_tests(target, settings.full ~= nil)
        
        --if not config.PRODUCTION then
        --else
        --    print "[Warning] Running in PRODUCTION mode, won't run tests."
        --end
    end,
    
    config = function (settings)
    	local home = os.getenv('HOME')
    	local fd = io.open(home + '/.bambooconfig', 'a')
    	for k, v in pairs(settings) do
    		if type(k) == 'string' then
    			fd:write(k + ' = "' + v + '"\n')
    		end
    	end
    end,

    start = function(settings)
		startProcesses(settings)
    end,

    stop = function (settings)
		killProcesses()
    end,

    restart = function (settings)
		killProcesses(settings)
		startProcesses(settings)
    end,
    
    createapp = function(settings)
        local appname = settings[1] or 'bambooapp'
		readSettings(config)
		local monserver_dir = config.monserver_dir
		local bamboo_dir = config.bamboo_dir

		-- create directory
        assert(posix.stat(appname) == nil, '[Error] Some file or directory of this name exists！')
        posix.mkdir(appname)

		-- copy files
        local cmdstr = ('cp -rf %s/src/cmd_tmpls/createapp/* ./%s/'):format(bamboo_dir, appname)
        os.execute(cmdstr)

		-- create media directory and later copy files to it
        local mediadir = ('%s/sites/%s'):format(monserver_dir, appname)
        --os.execute(('mkdir -p %s'):format(mediadir))
		os.execute(('ln -sdf $(pwd)/%s/media %s'):format(appname, mediadir))

        -- do mount --bind
        -- os.execute(('sudo mount -B %s/media %s'):format(appname, mediadir))        

        -- modify the md5 string in settings.lua
        local fd = io.open(('%s/settings.lua'):format(appname), 'r')
		local ctx = fd:read('*all')
		fd:close()

		ctx = ([[
project_name = "%s"
host = "%s"
]]):format(appname, appname) .. ctx
		
		local md5str = makemd5()
		ctx = ctx:gsub('####', md5str)

		local fd = io.open(('%s/settings.lua'):format(appname), 'w')
		fd:write(ctx)
		fd:close()
		
		-- modify the monserver config file template string
        local fd = io.open(('%s/monconfig.lua'):format(appname), 'r')
		local ctx = fd:read('*all')
		fd:close()

		ctx = ctx:gsub('%$PROJECT_NAME%$', appname)

		local fd = io.open(('%s/monconfig.lua'):format(appname), 'w')
		fd:write(ctx)
		fd:close()
		
		
        print(('[OK] Successfully created application %s.'):format(appname))
    end;
    
    createplugin = function(settings)
        local plugin_name = settings[1] or 'bambooplugin'
   		readSettings(config)
        local appname = config.project_name
		local monserver_dir = config.monserver_dir
		local bamboo_dir = config.bamboo_dir
        
        -- create dir
        assert(posix.stat(plugin_name) == nil, '[Error] Some file or directory has this name already！')
        posix.mkdir(plugin_name)

        local cmdstr = ('cp -rf %s/src/cmd_tmpls/createplugin/* ./%s/'):format(bamboo_dir, plugin_name)
        os.execute(cmdstr)

        local mediadir = ('%s/sites/%s/plugins/%s/'):format(monserver_dir, appname, plugin_name)
        os.execute(('mkdir -p %s'):format(mediadir))
        
        local cmdstr = ('cp -rf %s/src/cmd_tmpls/pluginmedia/*  %s'):format(bamboo_dir, mediadir)
        os.execute(cmdstr)

        os.execute(('ln -sdf %s %s/media'):format(mediadir, plugin_name)) 
        
        print(('[OK] Successfully created plugin %s.'):format(plugin_name))  
    end;
    
    createmodel = function(settings)
        local model_name = settings[1] or 'bamboomodel'
   		readSettings(config)
		local bamboo_dir = config.bamboo_dir
        
        local newfile = ('./%s.lua'):format(model_name:lower())
        local cmdstr = ('cp -rf %s/src/cmd_tmpls/createmodel/newmodel.lua %s'):format(bamboo_dir, newfile)
        os.execute(cmdstr)

        local fd = io.open(newfile, 'r')
		local ctx = fd:read('*all')
		fd:close()
		model_name = model_name:sub(1, 1):upper() + model_name:sub(2):lower()
		ctx = ctx:gsub('%$MODEL', model_name)

		local fd = io.open(newfile, 'w')
		fd:write(ctx)
		fd:close()
        
        print(('[OK] Successfully created model %s.'):format(model_name))  
    end;
	
	createcontroller = function(settings)
        local controller_name = settings[1] or 'bamboocontroller'
		controller_name = controller_name:lower()
   		readSettings(config)
		local bamboo_dir = config.bamboo_dir
        
        local newfile = ('./%s.lua'):format(controller_name + '_controller')
        local cmdstr = ('cp -rf %s/src/cmd_tmpls/createcontroller/newcontroller.lua %s'):format(bamboo_dir, newfile)
        os.execute(cmdstr)

        local fd = io.open(newfile, 'r')
		local ctx = fd:read('*all')
		fd:close()
		ctx = ctx:gsub('%$CONTROLLER', controller_name)
		local controller_model = controller_name:sub(1, 1):upper() + controller_name:sub(2):lower()
		ctx = ctx:gsub('%$MODEL', controller_model)
		
		local fd = io.open(newfile, 'w')
		fd:write(ctx)
		fd:close()
        
        print(('[OK] Successfully created controller %s.'):format(controller_name))  
    end;
    
    initdb = function (settings)
        local data_file = settings[1] or 'initial.data'

        local env = setmetatable({}, {__index=_G})
        setfenv(assert(loadfile(data_file)), env)()
        assert(env['DATA'], '[ERROR] There must be DATA variable in initial data file.')

        local params = {
            host = env.DB_HOST or settings.db_host or '127.0.0.1',
            port = env.DB_PORT or settings.db_port or 6379,
        }
        local which = env.WHICH_DB or settings.which_db or 0

        local redis_db = Redis.connect(params)
        if env.AUTH then redis_db:auth(env.AUTH) end
        redis_db:select(which)
        
        for k, v in pairs(env.DATA) do
            if type(v) ~= 'table' then
				-- store the string
                redis_db:set(tostring(k), tostring(v))
            else
            	-- store the item
                for kk, vv in pairs(v) do
                    redis_db:hset(tostring(k), tostring(kk), tostring(vv))
                end

                -- k is the format of User:1
				local model_name, num = k:match('([%w_]+):(%d+)')
				if model_name and type(tonumber(num)) == 'number' then
					-- update the latest __counter value of that model
					local key_list = redis_db:keys(model_name + ':[0-9]*')
					redis_db:set(model_name + ':__counter', #key_list)
					-- add item zset cache 
					-- maybe we should delete the same score item first
					redis_db:zremrangebyscore(model_name + ':__index', num, num)
					-- add it
					local indexfd
					if env.Indexes and env.Indexes[model_name] and v[env.Indexes[model_name]] then indexfd = env.Indexes[model_name] end
					redis_db:zadd(model_name + ':__index', num, indexfd and v[indexfd] or num)
				end
            end

        end

        BAMBOO_DB = redis_db
        if env.SCRIPTS then
			for _, script in ipairs(env.SCRIPTS) do
				-- load the external code in initial data file
				local f = assert(loadstring(script))
				-- execute it
				f()
			end
        end
        
        print('OK')
    end;

	-- push new data to database
    pushdb = function (settings)
        local data_file = settings[1] or 'initial.data'

        local env = setmetatable({}, {__index=_G})
        setfenv(assert(loadfile(data_file)), env)()
        assert(env['DATA'], '[ERROR] There must be DATA variable in initial data file.')

        local params = {
            host = env.DB_HOST or settings.db_host or '127.0.0.1',
            port = env.DB_PORT or settings.db_port or 6379,
        }
        local which = env.WHICH_DB or settings.which_db or 0

        local redis_db = Redis.connect(params)
        redis_db:select(which)
        -- Global variable BAMBOO_DB, to use bamboo's model function, must specify it
        BAMBOO_DB = redis_db

		local childenv = {}
		setfenv(assert(loadfile('app/handler_entry.lua') or loadfile('../app/handler_entry.lua')), setmetatable(childenv, {__index=_G}))()

		for k, v in pairs(DATA) do
			if type(v) == 'table' then
				local model = bamboo.getModelByName(k)
				for i, item in ipairs(v) do
					local ori_obj = model:getByName(item.name)
					assert(isFalse(ori_obj), ("[ERROR] The same name object %s exists."):format(item.name))
				end
			end
		end

		-- we have ensure no same name key exists
		for k, v in pairs(DATA) do
			if type(v) == 'table' then
				local model = bamboo.getModelByName(k)
				local obj
	
				for i, item in ipairs(v) do
					print(item.name)
					obj = model(item)
					obj:save()
				end
			else
				-- do nothing now
			end
		end
        
        print('OK')
    end;

    clearmodel = function (settings)
		local model_name = settings[1]
		assert(model_name, '[ERROR] model_name must be specified!')
        
        local params = {
            host = settings.db_host or '127.0.0.1',
            port = settings.db_port or 6379,
        }
        local which = settings.which_db or 0

        local redis_db = Redis.connect(params)
        redis_db:select(which)

		local key_list = redis_db:keys( model_name + ':*')
		for i, v in ipairs(key_list) do
			print(v)
			redis_db:del(v)
		end

		print('OK.')
    end;

    shell = function (settings)
   		readSettings(config)
		local bamboo_dir = config.bamboo_dir

		local shell_file = bamboo_dir + '/src/bin/shell.lua'
		local host = settings.db_host or config.DB_HOST or '127.0.0.1'
        local port = settings.db_port or config.DB_PORT or 6379
        local which = settings.which_db or config.WHICH_DB or 0

        os.execute('lua -i ' + shell_file + (' %s %s %s'):format(host, port, which))

        print('Return.')
		
    end;
    
	startserver = function (settings)
		local servername = settings[1]
		local config_file = settings.config_file or 'config.lua'
		local _config = {}
		setfenv(assert(loadfile(config_file), "Failed to load the monserver's config: " .. config_file), _config)()
		
		if not servername then
			print("You can start the following servers:")
			print('', 'all')
			for _, server in ipairs(_config.servers) do
				print('', server.name)
			end
		elseif servername == 'all' then
            os.execute("m2sh load --config "..config_file);
			print("================== Ready to start servers ===================")
			for _, server in ipairs(_config.servers) do
				assert(server and server.name, '[ERROR] server or server.name is nil.')
				--os.execute(('monserver %s %s'):format(config_file, server.name))
			    os.execute(('m2sh start --name %s'):format(server.name))
			end
			print("OK.")
		else
            os.execute("m2sh load --config "..config_file);
			print("================== Ready to start server ===================")
			for _, server in ipairs(_config.servers) do
				if server and server.name == servername then
					--os.execute(('monserver %s %s'):format(config_file, server.name))
					os.execute(('m2sh start --name %s'):format(server.name))
				end
			end
			print("OK.")
		end
		
	end;
	
	stopserver = function (settings)
		local servername = settings[1]
		local config_file = settings.config_file or 'config.lua'
		local _config = {}
		setfenv(assert(loadfile(config_file), "Failed to load the monserver's config: " .. config_file), _config)()
					
		if not servername then
			print("You can stop the following servers:")
			print('', 'all')
			for _, server in ipairs(_config.servers) do
				print('', server.name)
			end
		elseif servername == 'all' then
			print("==== Ready to stop servers ====")
			for _, server in ipairs(_config.servers) do
				--os.execute(('m2sh stop --db %s -name %s'):format(config_db, server.name))
			end
			print("OK.")
		else
			print("==== Ready to stop server ====")
			for _, server in ipairs(_config.servers) do
				if server and server.name == servername then
					--os.execute(('m2sh stop --db %s -name %s'):format(config_db, server.name))
				end
			end
			print("OK.")
		end
		
	end;
    
	importadmin = function (settings)
        readSettings(config)
		local monserver_dir = config.monserver_dir
		local bamboo_dir = config.bamboo_dir

		-- copy admin files to app
		local cmdstr = ('cp -rf %s/src/cmd_tmpls/admin ./'):format(bamboo_dir)
        os.execute(cmdstr)
		-- move the admin static files to media
		local cmdstr = 'mv ./admin/media ./media/admin'
        os.execute(cmdstr)
		
		print('OK.')
	end;
	
    createsuperuser = function (settings)
		  readSettings(config)

		  local redis = require 'bamboo.redis'

		  local bamboo_dir = config.bamboo_dir

		  local host = settings.db_host or config.DB_HOST or '127.0.0.1'
		  local port = settings.db_port or config.DB_PORT or 6379
		  local which = settings.which_db or config.WHICH_DB or 0					  

		  local db = redis.connect {host=host, port=port, which=which}
		  -- make model.lua work
		  BAMBOO_DB = db
		  setfenv(assert(loadfile('app/handler_entry.lua') or loadfile('../app/handler_entry.lua')), _G)()

		  if not bamboo.MAIN_USER then
			  print("Please use registerMainUser() function to register user module")
			  return
		  end
		  io.write("Username:")
		  local username = io.read("*line")
		  io.write("Password:")
		  --hide password
		  os.execute("stty -echo")
		  local password = io.read("*line")
		  io.write("\n")
		  io.write("Password again:")
		  local password2 = io.read("*line")
		  io.write("\n")
		  os.execute("stty echo")
		  if password ~= password2 then
			  print("Passwords are not equal!")
			  return
		  end
		  local data = {username=username, password=password}
		  local ret, err = bamboo.MAIN_USER:validate(data)
		  if not ret then
			  print("Error!")
			  for _, v in ipairs(err) do
				  print(v)
			  end
			  return
		  end
		  
		  local user = bamboo.MAIN_USER(data)
		  if user:save() then
			  local Perms = require 'bamboo.models.permission'
			  user:addForeign("perms", Perms:getByIndex("_sys_admin_"))
			  print("Add superuser successfully!")
		  else
			  print("Add superuser failly!")
		  end
	  end;
}






function run(cmd, settings)
    local cmd_to_run = COMMANDS[cmd]

    if cmd_to_run then
        cmd_to_run(settings)
    else
        print("ERROR: that's not a valid command")
        print("USAGE: bamboo <command> <options>")
        print("Please input 'bamboo help' to list all available commands.")
    end
end


local cmd, settings = parse_args(arg)
if not cmd then print('No cmd input.'); return  end

run(cmd, settings)

