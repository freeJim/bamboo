#!/usr/bin/env luajit 

-- ATTEN: this file is not a module
package.path = './?.lua;./?/init.lua;./?/src/init.lua;/usr/local/lib/lua/5.1/?.lua;/usr/local/lib/lua/5.1/?/init.lua;' .. package.path

require 'posix'
require 'lglib'
require 'bamboo'
local util = require 'bamboo.util'
require 'zmq.poller'
local poller = zmq.poller(64)
bamboo.poller = poller
------------------------------------------------------------------------
--- Global variables delarations: in top project code, we can see these variables
-- two important global variables
_G['web'] = nil
_G['req'] = nil

local DEFAULT_ALLOWED_METHODS = {GET = true, POST = true, PUT = true, JSON = true, XML = true}

------------------------------------------------------------------------
local istesting = false
-- APP_DIR: application directory, default is './', because we start it in application directory
local APP_DIR = './'
--print(arg[1], arg[2])
if arg[1] == '-f' and arg[2]:startsWith('tests/') then
	istesting = true
else
	APP_DIR = arg[1] or './'
end
-- arg[2]: target file, every process handle one entry file, arg[2] is that file, default is 'handler_entry.lua'
local handler_file = 'app/handler_entry.lua'
if not istesting and arg[2] then
   handler_file = arg[2]
end

-- settings.lua is the configuration file of one app, it sets at APP_DIR/settings.lua
local CONFIG_FILE = APP_DIR + "settings.lua"
local PROCESS_DIR = posix.getcwd()
-- the full directory of one application
local PROJECT_DIR = PROCESS_DIR + '/' + APP_DIR

-- read settings
local config = util.readSettings(bamboo.config)


-- add the project's direcotry to the lua searching path, to simplify the calling relation
package.path = package.path + (";%s/?.lua;%s/?/init.lua;"):format(PROJECT_DIR, PROJECT_DIR)
------------------------------------------------------------------------



local redis = require 'hiredis'

local DB_HOST = config.DB_HOST or '127.0.0.1'
local DB_PORT = config.DB_PORT or 6379
local WHICH_DB = config.WHICH_DB or 0
local AUTH = config.AUTH or nil

-- create a redis connection in this process
-- we will create one redis connection for every process
BAMBOO_DB = redis.connect(DB_HOST, DB_PORT)
assert(BAMBOO_DB, '[Error] Database connection is failed.')
assert(BAMBOO_DB:command("auth",AUTH));
assert(BAMBOO_DB:command("select",WHICH_DB));

require 'bamboo.util'
_G['View'] = require 'bamboo.view'
_G['Form'] = require 'bamboo.form'
_G['Model'] = require 'bamboo.model'
_G['Session'] = require 'bamboo.session'
local Web = require 'bamboo.web'

------------------------------------------------------------------------
-- URLS combination
local childenv = {}
-- load file handler_xxx.lua, make its environment as childenv, extract global variables in handler_xxx.lua to childenv
setfenv(assert(loadfile(handler_file)), setmetatable(childenv, {__index=_G}))()

-- get the router and simplify the entry file's URLS
-- assert(not isFalse(childenv.URLS[1]), '[Error] URLS value is not right. URLS[1] must be string and NOT be blank.')
local router = childenv.URLS[1] or '/'
if childenv.URLS[1] then childenv.URLS[1] = nil end

table.update(bamboo.URLS, childenv.URLS)
childenv.URLS = bamboo.URLS
config.disconnect = childenv.disconnect

bamboo.registerModule(childenv)
local URLS = bamboo.URLS


------------------------------------------------------------------------
-- check the structure legality
local function checkURLS(urls)
	for k, v in pairs(urls) do
		checkType(k, v, 'string', 'function')
	end
end
checkURLS(URLS)


local normalizePath = require('lglib.path').normalize

-- urls processing work
local function makeUrlHandlerMapping(URLS)
	local table_concrete = {}
	local table_pattern = {}
	
	local base = router
	for k, v in pairs(URLS) do
		local url_t = base + k
		-- remove abundant '/'
		url_t = normalizePath(url_t)
		
		-- separate the pattern format from normal concrete format
		if url_t:find('%[?%%[%%%-_a-zA-Z]+%]?%+?%-?') or url_t:find('%.%+?%-?') then
			table_pattern[url_t:lower()] = v
		else
			table_concrete[url_t:lower()] = v
		end
	end	
	
	return table_concrete, table_pattern
end
local MappingTableConcrete, MappingTablePattern = makeUrlHandlerMapping(URLS)
-- keep syncronization
bamboo.URLS = MappingTableConcrete
bamboo.PATTERN_URLS = MappingTablePattern

print('-------------------- URL Settings --------------------')
ptable(MappingTableConcrete)
ptable(MappingTablePattern)
print('------------------------------------------------------')

------------------------------------------------------------------------
-- find handler function by path
-- @param path:	coming path
-- @return:  two values, first is a handler function, second is a boolean to indict whether is state programming
------------------------------------------------------------------------
local function getHandlerByPath(path)
	local path = path:lower() 
	local parse = function (v)
		if type(v) == 'table' then
			checkType(v.handler, 'function')
			return v.handler
		elseif type(v) == 'function' then
			return v
		end
	end
	
	local key, value = "", nil
	
	-- process concrete case first
	if MappingTableConcrete[path] then return parse(MappingTableConcrete[path]), path end

	-- if process the pattern case
	for k, v in pairs(MappingTablePattern) do
		-- for pattern cases, we select the concretest one
		if k == path then
			return parse(v)
		-- if some pattern cases meet one path meanwhile, and they have the save length, select the last one
		elseif path:match('^' + k + '$') then
			if key == '' or #k >= #key then 
				key, value = k, v
			end
		end

	end	

	-- if walks here, means this is a pattern case path
	if key and value then
		return parse(value), key
	end
	
	-- if walks here, means no suited case matched
	return nil
end


local function preparse(req)
	if req.method == 'GET' then
		req.GET = Form:parseQuery(req)
		req.POST = {}
		req.PARAMS = req.GET
	elseif req.method == 'POST' then
		req.GET = Form:parseQuery(req)
		req.POST = Form:parse(req)
		req.PARAMS = table.update(req.GET, req.POST)
	end
end


-- local function createStateRecorder(STATE, mapt)
--	for k, _ in pairs(mapt) do
--		STATE[k] = {}
--	end
--	return STATE
-- end

-- local STATE = createStateRecorder(setmetatable({}, {__mode="k"}), MappingTableConcrete)



------------------------------------------------------------------------
-- execute passed in function
-- @param state:  	web object
-- @param req:		request object
-- @param before:	before function
-- @param after:	after function
-- @param action_func:	  action function
-- @return true|false 
------------------------------------------------------------------------
local function execState(state, req, before, after, action_func)
    local good, err

	if before then
        good, err = pcall(before, state, req)
        if not good then return good, err end
        if not err then return false end
    end
	
    good, err = action_func(state, req)
   
    if after then
        local after_good, after_err = pcall(after, state, req)
        if not after_good then return after_good, after_err end
        if not after_err then return false end
    end

    return good, err
end

------------------------------------------------------------------------
-- stateless programming
-- @param conn:		connection object
-- @param main:		application main function
-- @param req:		request object
-- @param before:	before function
-- @param after:	after function
-- @return: none
------------------------------------------------------------------------
local function runStateless(conn, main, req, before, after)
    local state = Web(conn, main, req, false)
    -- update the latest web state to global variale web
    _G['web'] = state
	
    local good, err = execState(state, req, before, after, function(s,r)
	return pcall(s.controller, s, r)
    end)

    if not good and err then
	if config.PRODUCTION then
	    web.conn:reply_http(req, '<h2>Page error.</h2>', 500, 'Page error.', req.headers)
	    print('[Error] Page error.')
	else
	    local errors = require 'bamboo.errors'
	    errors.reportError(conn, req, err, state)
	end
    end
end

local function runCoro(conn, main, req, before, after)
    local state = Web(conn, main, req, true)
    _G['web'] = state
    -- only run once
    local good, err = execState(state, req, before, after, function (s, r)
	return coroutine.resume(state.controller, state, req) 
    end)

    if not good and err then
	if config.PRODUCTION then
	    web.conn:reply_http(req, '<h2>Page error.</h2>', 500, 'Page error.', req.headers)
	    print('[Error] Page error.')
	else
	    local errors = require 'bamboo.errors'
	    errors.reportError(conn, req, err, state)
	end
    end
end

local SUSPENDED_TASKS = {}
bamboo.SUSPENDED_TASKS = SUSPENDED_TASKS
-- conn: zmq connection
-- revents: return events
local conn_dispatcher = function (conn, revents)
    local state = SUSPENDED_TASKS[conn]
    if not state then return nil end

    return coroutine.resume(state.controller, conn:recv())
end
bamboo.conn_dispatcher = conn_dispatcher
local URLS_STATES = bamboo.URLS_STATES

------------------------------------------------------------------------
-- Bamboo's main loop for every bamboo process
-- @param conn:	 	connection object
-- @param config:	config table from external
-- @return:			none
------------------------------------------------------------------------
local function run(conn, config)
    local main, ident, disconnect = config.main, config.ident, config.disconnect
    local before, after = config.before, config.after
    local good, err
    local req, msg_type, controller
    local path
	
    -- main loop
    local monserver_request = function ()
		-- while true do
        -- Get a message from the Mongrel2 server, if have no, block to wait
        req, err = conn:recv()
		-- update the latest request object to global request reference
		_G['req'] = req

        if req and not err then
			-- if http directive is not in the range of bamboo specified 
            if not config.methods[req.headers.METHOD] then
                local errors = require 'bamboo.errors'
                errors.basicError(conn, req, "Method Not Allowed",
					405, "Method Not Allowed", {Allow = config.allowed_methods_header})
            else
                msg_type = req.data.type
				
				-- if client close the connection
                if msg_type == 'disconnect' then
					print("DISCONNECT", req.conn_id)
                    if disconnect then disconnect(req) end
                else
					-- generate req.session_id
                    ident(req)
					-- normalize the path's format
					path = normalizePath(req.path)

					req.method = req.headers.METHOD
					req.path = path
					if req.headers['x-requested-with'] == 'XMLHttpRequest' then	req['ajax'] = true end
					req.userdata = {}

					print(("req %s: %s"):format(config.route, req.conn_id), os.date(), req.path, req.method, req.session_id)
					
					-- record session
					Session:set(req)
					
					-------------------------------------------------
					-- according coming path, find the corresponding handler function
					local main, copath = getHandlerByPath(path)
					if not main then
						-- return 404 page
						print(('[Warning] No handler to process this path: %s.'):format(path))
						conn:reply_http(req, '<h2>Page Not Found.</h2>', 404, 'Not Found', req.headers)
					else
						-- inject req.GET, req.POST, req.PARAMS
						preparse(req)
						-- this is the default way
						if URLS_STATES[copath] then
							runCoro(conn, main, req, before, after)
						else
							runStateless(conn, main, req, before, after)
						end
					end

				end
			end
		else
			print("FATAL ERROR", good, req, err)
		end
    end
	
    -- add the main monserver request to poll
    -- conn.reqs is the socket pull from monserver
    poller:add(conn.reqs, zmq.POLLIN, monserver_request)

    -- start the main loop
    if config.prof then 
        local prof = require 'profiler'
        prof.start("prof_11111.out");
        poller:start()
        prof.stop();
    else
        poller:start()
    end

    print('Bamboo main loop aborted!')
end

local m2 = require 'bamboo.m2'

local function collectConfig(config)

	-- config can be from three places:
	-- 1. application settings.lua
	-- 2. default values bamboo defined
	-- 3. mognrel2's config sqlite3 file
	local config = config or {}
	config.APP_DIR = APP_DIR
	-- bamboo app and mongrel2's interface
	config.route = router
	config.MappingTableConcrete = MappingTableConcrete
	config.MappingTablePattern = MappingTablePattern
	
    -- templates' directory
	config.templates = config.templates or (APP_DIR + 'views/')
	config.views = config.views or config.templates
	
    -- identifier generator, user can define their own
	config.ident = config.ident or Session.identRequest
    -- HTTP directive white list, user can define their own
    config.methods = config.methods or DEFAULT_ALLOWED_METHODS

    local allowed = {}
    for m, yes in pairs(config.methods) do
        if yes then allowed[#allowed + 1] = m end
    end
    -- make allowed_methods_header
	config.allowed_methods_header = table.concat(allowed, ' ')
	
	config.config_file = config.config_file or "config.lua"
	if config.monserver_dir then
		-- format full directory of config_file, to find mongrel2's configuration
		config.config_file = config.monserver_dir + '/' + config.config_file
	end

	return config
end


------------------------------------------------------------------------
-- Bamboo start interface
-- @param config:	configuration table from application
-- @return:			none
------------------------------------------------------------------------
local function start(config)
	-- load sqlite3 configuration, update to config table
    m2.loadConfig(config)
	-- make a connection as the pipe interact with mongrel2
    local conn = assert(m2.connect(config), "Failed to connect to monserver.")

    -- boot main loop
    run(conn, config)
end

collectConfig(config)
--bamboo.config = config
bamboo.EXPORT_FOR_TESTING = {
	config = config,
	run = run,
	updateConfig = updateConfig,
	DEFAULT_ALLOWED_METHODS = DEFAULT_ALLOWED_METHODS,
	ident = Session.identRequest,
	parseSessionId = Session.parseSessionId,
--	getState = getState,
}


------------------------------------------------------------
-- START BAMBOO
------------------------------------------------------------
-- normal case
if not istesting then
   start(config)
end

